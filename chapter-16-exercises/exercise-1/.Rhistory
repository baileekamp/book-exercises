install.packages("ggplot2")
library(ggplot2)
library(dplyr)
# For this exercise you'll be working with the `diamonds` data set included in
# the ggplot2 library
# Use `?diamonds` to get more information about this data set (including the
# column descriptions. Also check the _column names_ and the _number of rows_
# in the data set
?diamonds
library(ggplot2)
library(dplyr)
# For this exercise you'll be working with the `diamonds` data set included in
# the ggplot2 library
# Use `?diamonds` to get more information about this data set (including the
# column descriptions. Also check the _column names_ and the _number of rows_
# in the data set
?diamonds
library("ggplot2")
library("dplyr")
?diamonds
install.packages("ggplot2")
install.packages("ggplot2")
library("ggplot2")
library("dplyr")
# For this exercise you'll be working with the `diamonds` data set included in
# the ggplot2 library
# Use `?diamonds` to get more information about this data set (including the
# column descriptions. Also check the _column names_ and the _number of rows_
# in the data set
?diamonds
nrow(diamonds)
# This data set has A LOT of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds_sample`
diamonds_df <- sample_n(diamonds, 1000)
diamonds_sample <- sample_n(diamonds, 1000)
# Start by making a new `ggplot` with the `diamonds_sample` as the data (no
# geometry yet)
# What do you see? (What did you expect?)
ggplot(diamonds_sample)
ggplot(data = diamonds_sample)
# Draw a scatter plot (with point geometry) with for the `diamonds_sample` set,
# with the `carat` mapped to the x-position and `price` mapped to the y-position.
ggplot(data = diamonds_sample) +
geom_point(x = carat, y = price)
ggplot(data = diamonds_sample) +
geom_point(x = carat, y = price)
# Store this sample in a variable `diamonds_sample`
diamonds_sample <- sample_n(diamonds, 1000)
# Start by making a new `ggplot` with the `diamonds_sample` as the data (no
# geometry yet)
# What do you see? (What did you expect?)
ggplot(data = diamonds_sample)
ggplot(data = diamonds_sample) +
geom_point(x = carat, y = price)
View(diamonds_sample)
# ggplot2 was installed in this exercise
# Exercise 1: ggplot2 basics
# Install and load the `ggplot2` package
# You will also want to load `dplyr`
library("ggplot2")
library("dplyr")
# For this exercise you'll be working with the `diamonds` data set included in
# the ggplot2 library
# Use `?diamonds` to get more information about this data set (including the
# column descriptions. Also check the _column names_ and the _number of rows_
# in the data set
?diamonds
nrow(diamonds)
# This data set has A LOT of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds_sample`
diamonds_sample <- sample_n(diamonds, 1000)
# Start by making a new `ggplot` with the `diamonds_sample` as the data (no
# geometry yet)
# What do you see? (What did you expect?)
ggplot(data = diamonds_sample)
# Draw a scatter plot (with point geometry) with for the `diamonds_sample` set,
# with the `carat` mapped to the x-position and `price` mapped to the y-position.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price))
# clarity.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price))
# Draw the same plot as above, but for the entire `diamonds` data set. Note this
# may take a few seconds to generate.
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, c(color = "blue")))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), c(color = "blue"))
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color = "blue")
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), shape = cut)
# Draw a scatter plot for `diamonds_sample` of `price` by `carat`, where each
# point has an aesthetic _shape_ based on the diamond's `cut`.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, shape = cut))
# load relevant libraries
library("httr")
library("jsonlite")
# Be sure and check the README.md for complete instructions!
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R")
# Create a variable `movie_name` that is the name of a movie of your choice.
movie_name <- "Pineapple Express"
query_params_list <- list("api-key" = nyt_key, "movie_name" = movie_name)
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
base_uri <- "https://api.nytimes.com/svc/movies/v2"
endpoint <- "/reviews/search.json"
uri <- paste0(base_uri, endpoint)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
response <- GET(uri, query = query_params_list)
body <- content(response, "text", encoding = "UTF-8")
data <-fromJSON(body)
library("httr")
library("jsonlite")
# Be sure and check the README.md for complete instructions!
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R")
# Create a variable `movie_name` that is the name of a movie of your choice.
movie_name <- "Pineapple Express"
query_params_list <- list("api-key" = nyt_key, "movie_name" = movie_name)
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
nyt_key <- source("apikey.R")
setwd("C:/Users/baile/Desktop/book-exercises/chapter-18-exercises/exercise-1")
# load relevant libraries
library("httr")
library("jsonlite")
# Be sure and check the README.md for complete instructions!
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
nyt_key <- source("apikey.R")
query_params_list <- list("api-key" = nyt_key, "movie_name" = movie_name)
base_uri <- "https://api.nytimes.com/svc/movies/v2"
endpoint <- "/reviews/search.json"
uri <- paste0(base_uri, endpoint)
# Extract the content and convert it from JSON
response <- GET(uri, query = query_params_list)
body <- content(response, "text", encoding = "UTF-8")
data <-fromJSON(body)
response <- GET(uri, query = query_params_list)
base_uri <- "https://api.nytimes.com/svc/movies/v2"
endpoint <- "/reviews/search.json"
uri <- paste0(base_uri, endpoint)
response <- GET(uri, query = query_params_list)
body <- content(response, "text", encoding = "UTF-8")
data <-fromJSON(body)
response <- GET(uri, query = query_params_list)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
response <- GET(uri, query = "query_params_list")
# Extract the content and convert it from JSON
response <- GET(uri, query = "query_params_list")
body <- content(response, "text", encoding = "UTF-8")
data <-fromJSON(body)
View(data)
View(data)
source("apikey.R")
movie_name <- "Pineapple Express"
query_params_list <- list("api-key" = nyt_key, "movie_name" = movie_name)
library("httr")
library("jsonlite")
# Be sure and check the README.md for complete instructions!
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R")
movie_name <- "Pineapple Express"
query_params_list <- list("api-key" = nyt_key, "movie_name" = movie_name)
# and your `movie_name` variable as the search query!
base_uri <- "https://api.nytimes.com/svc/movies/v2"
endpoint <- "/reviews/search.json"
uri <- paste0(base_uri, endpoint)
response <- GET(uri, query = "query_params_list")
body <- content(response, "text", encoding = "UTF-8")
data <-fromJSON(body)
View(data)
print(uri)
base_uri <- "https://api.nytimes.com/svc/movies/v2"
endpoint <- "/reviews/search.json/"
uri <- paste0(base_uri, endpoint)
response <- GET(uri, query = "query_params_list")
body <- content(response, "text", encoding = "UTF-8")
data <-fromJSON(body)
View(data)
print(response)
response <- GET(uri, query = query_params_list)
print(response)
body <- content(response, "text", encoding = "UTF-8")
data <-fromJSON(body)
View(data)
View(data)
# Manually inspect the returned data and identify the content of interest
# (which are the movie reviews).
# Use functions such as `names()`, `str()`, etc.
reviews <- data$results
View(reviews)
interesting <- data %>%
results %>%
names()
interesting <- data$results %>%
names()
View(data)
View(reviews)
interesting <- data$results %>%
colnames()
View(data)
View(reviews)
interesting <- data$results[colnames()]
# Manually inspect the returned data and identify the content of interest
# (which are the movie reviews).
# Use functions such as `names()`, `str()`, etc.
interesting <- colnames(data$results)
str(data$results$display_title, data$results$critics_pick)
interesting <- str(data$results$display_title, data$results$critics_pick)
# Flatten the movie reviews content into a data structure called `reviews`
reviews <- flatten(interesting)
# Manually inspect the returned data and identify the content of interest
# (which are the movie reviews).
# Use functions such as `names()`, `str()`, etc.
results_df <- as.data.frame(data$results)
colnames(data$results)
interesting <- str(data$results$display_title, data$results$critics_pick)
results_df <- as.data.frame(data$results)
column_names <- colnames(data$results)
interesting <- str(data$results$display_title, data$results$critics_pick)
reviews <- flatten(interesting)
column_names <- colnames(results_df)
results_df <- as.data.frame(data$results)
column_names <- colnames(results_df)
interesting <- str(results_df$display_title, results_df$critics_pick)
# Flatten the movie reviews content into a data structure called `reviews`
reviews <- flatten(interesting)
# Flatten the movie reviews content into a data structure called `reviews`
reviews <- flatten(results_df, interesting)
# Flatten the movie reviews content into a data structure called `reviews`
reviews <- flatten(results_df)
View(reviews)
?flatten
?flatten()
# Flatten the movie reviews content into a data structure called `reviews`
reviews <- (results_df, title = display_title)
# Flatten the movie reviews content into a data structure called `reviews`
reviews <- flatten(results_df, title = display_title)
# Manually inspect the returned data and identify the content of interest
# (which are the movie reviews).
# Use functions such as `names()`, `str()`, etc.
results_df <- data.frame(data$results$display_title)
View(results_df)
View(results_df)
# Manually inspect the returned data and identify the content of interest
# (which are the movie reviews).
# Use functions such as `names()`, `str()`, etc.
results_df <- data.frame(data$results = display_title)
# Manually inspect the returned data and identify the content of interest
# (which are the movie reviews).
# Use functions such as `names()`, `str()`, etc.
results_df <- data.frame(data$results$display_title, data$results$critics_pick)
str(results_df)
# Manually inspect the returned data and identify the content of interest
# (which are the movie reviews).
# Use functions such as `names()`, `str()`, etc.
results_df <- data.frame(data$results$display_title, data$results$critics_pick, stringsAsFactors = FALSE)
str(results_df)
# Flatten the movie reviews content into a data structure called `reviews`
reviews <- flatten(str(results_df))
results_df <- as.data.frame(data$results$display_title, data$results$critics_pick, stringsAsFactors = FALSE)
str(results_df)
# Flatten the movie reviews content into a data structure called `reviews`
reviews <- flatten(str(results_df))
# Flatten the movie reviews content into a data structure called `reviews`
reviews <- flatten(results_df)
View(reviews)
# Manually inspect the returned data and identify the content of interest
# (which are the movie reviews).
# Use functions such as `names()`, `str()`, etc.
results_df <- as.data.frame(data$results$display_title, data$results$critics_pick, stringsAsFactors = FALSE)
View(results_df)
# Manually inspect the returned data and identify the content of interest
# (which are the movie reviews).
# Use functions such as `names()`, `str()`, etc.
results_df <- as.data.frame(data$results$critics_pick, stringsAsFactors = FALSE)
View(results_df)
# Manually inspect the returned data and identify the content of interest
# (which are the movie reviews).
# Use functions such as `names()`, `str()`, etc.
results_df <- as.data.frame(data$results$display_title, data$results$critics_pick, stringsAsFactors = FALSE)
# Manually inspect the returned data and identify the content of interest
# (which are the movie reviews).
# Use functions such as `names()`, `str()`, etc.
results_df <- as.data.frame(data$results$display_title, critics_pick, stringsAsFactors = FALSE)
# Manually inspect the returned data and identify the content of interest
# (which are the movie reviews).
# Use functions such as `names()`, `str()`, etc.
results_df <- as.data.frame(data$results$display_title, results$critics_pick, stringsAsFactors = FALSE)
# Manually inspect the returned data and identify the content of interest
# (which are the movie reviews).
# Use functions such as `names()`, `str()`, etc.
results_df <- as.data.frame(data$results$display_title, data$results$critics_pick, stringsAsFactors = FALSE)
results_df <- as.data.frame(data$results$display_title, data$results$critics_pick)
# Manually inspect the returned data and identify the content of interest
# (which are the movie reviews).
# Use functions such as `names()`, `str()`, etc.
display_title <- data$results$display_title
critics_pick <- data$results$critics_pick
results_df <- as.data.frame(display_title, critics_pick, stringsAsFactors = FALSE)
results_df <- data.frame(display_title, critics_pick, stringsAsFactors = FALSE)
View(results_df)
str(results_df)
# Flatten the movie reviews content into a data structure called `reviews`
reviews <- flatten(results_df)
View(reviews)
# Flatten the movie reviews content into a data structure called `reviews`
reviews <- flatten(str(results_df))
# Flatten the movie reviews content into a data structure called `reviews`
reviews <- flatten(results_df)
setwd("C:/Users/baile/Desktop/book-exercises/chapter-16-exercises/exercise-1")
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = price))
# Draw a scatter plot for `diamonds_sample` of *`cut`* by `carat`, where each
# point has an aesthetic _size_ based on the diamond's *`price`*
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, size = price, color = price))
ggplot(data = diamonds_sample) +
geom_line(mapping = aes(x = carat, y = price, color = cut))
ggplot(data = diamonds_sample) +
geom_smooth(mapping = aes(x = carat, y = price, color = cut))
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(x = cut, y = price, color = cut))
# Draw a plot with column geometry (a bar chart), mapping the diamond's `cut` to
# the x-axis and `price` to the y-axis. Note that by default, column geometry
# will us the "sum" of all of the y-values, so that the chart is actually of the
# TOTAL value of all of the diamonds of that cut!
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(x = cut, y = price))
# Draw a plot with column geometry (a bar chart), mapping the diamond's `cut` to
# the x-axis and `price` to the y-axis. Note that by default, column geometry
# will us the "sum" of all of the y-values, so that the chart is actually of the
# TOTAL value of all of the diamonds of that cut!
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(x = cut, y = price, fill = clarity))
library("ggplot2")
# For this exercise you will again be working with the `diamonds` data set.
# Use `?diamonds` to review details about this data set
?diamonds
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = clarity, y = price))
ggplot(data = diamonds) +
geom_col(mapping = aes(x = clarity, y = price))
# Draw a column (bar) chart of diamonds cuts by price, with each bar filled by
# clarity. You should see a _stacked_ bar chart.
ggplot(data = diamonds) +
geom_col(mapping = aes(x = clarity, y = price), position = "fill")
# Draw a column (bar) chart of diamonds cuts by price, with each bar filled by
# clarity. You should see a _stacked_ bar chart.
ggplot(diamonds) +
geom_col(mapping = aes(x = clarity, y = price), position = "fill")
# Draw a column (bar) chart of diamonds cuts by price, with each bar filled by
# clarity. You should see a _stacked_ bar chart.
ggplot(data = diamonds) +
geom_col(mapping = aes(x = clarity, y = price), position = "fill")
# Draw a column (bar) chart of diamonds cuts by price, with each bar filled by
# clarity. You should see a _stacked_ bar chart.
ggplot(data = diamonds) +
geom_col(mapping = aes(x = clarity, y = price, fill = clarity), position = "fill")
# Draw a "boxplot" (with `geom_boxplot`) for the diamond's price (y) by color (x)
ggplot(diamonds_sample) +
geom_boxplot(mapping = aes(x = price, y = color))
# Draw a "boxplot" (with `geom_boxplot`) for the diamond's price (y) by color (x)
ggplot(diamonds_sample) +
geom_boxplot(mapping = aes(x = color, y = price))
# Draw a "boxplot" (with `geom_boxplot`) for the diamond's price (y) by color (x)
ggplot(diamonds_sample) +
geom_boxplot(mapping = aes(x = color, y = price)) +
scale_y_log10()
# Draw a "boxplot" (with `geom_boxplot`) for the diamond's price (y) by color (x)
ggplot(diamonds_sample) +
geom_boxplot(mapping = aes(x = color, y = price))
# This has a lot of outliers, making it harder to read. To fix this, draw the
# same plot but with a _logarithmic_ scale for the y axis.
ggplot(diamonds_sample) +
geom_boxplot(mapping = aes(x = color, y = price)) +
scale_y_log10()
# For another version, draw the same plot but with `violin` geometry instead of
# `boxplot` geometry!
# How does the logarithmic scale change the data presentation?
ggplot(diamonds_sample) +
geom_violin(mapping = aes(x = color, y = price)) +
scale_y_log10()
ggplot(diamonds_sample) +
geom_bin2d(mapping = aes(x = carat, y = price))
# Another interesting plot: draw a plot of the diamonds price (y) by carat (x),
# using a heatmap of 2d bins (geom_bin2d)
# What happens when you make the x and y channels scale logarithmically?
ggplot(diamonds_sample) +
geom_bin2d(mapping = aes(x = carat, y = price)) +
scale_y_log10() +
scale_x_log10()
# Draw a scatter plot for the diamonds price (y) by carat (x). Color each point
# by the clarity (Remember, this will take a while. Use a sample of the diamonds
# for faster results)
ggplot(diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity)) +
scale_color_brewer(palette = "Set3")
# Draw a scatter plot for the diamonds price (y) by carat (x). Color each point
# by the clarity (Remember, this will take a while. Use a sample of the diamonds
# for faster results)
ggplot(diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity)) +
scale_color_brewer(palette = "PuOr")
# Draw a scatter plot for the diamonds price (y) by carat (x). Color each point
# by the clarity (Remember, this will take a while. Use a sample of the diamonds
# for faster results)
ggplot(diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity)) +
scale_color_brewer(palette = "Dark2")
# Draw a scatter plot for the diamonds price (y) by carat (x). Color each point
# by the clarity (Remember, this will take a while. Use a sample of the diamonds
# for faster results)
ggplot(diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity)) +
scale_color_brewer(palette = "Purples")
# Draw a scatter plot for the diamonds price (y) by carat (x). Color each point
# by the clarity (Remember, this will take a while. Use a sample of the diamonds
# for faster results)
ggplot(diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity)) +
scale_color_brewer(palette = "Purples", direction = -1)
ggplot(data = diamonds) +
geom_col(mapping = aes(x = clarity, y = price, fill = clarity), position = "fill")
# Take the scatter plot of price by carat data (colored by clarity) and add
# _facets_ based on the diamond's `color`
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
# Take the scatter plot of price by carat data (colored by clarity) and add
# _facets_ based on the diamond's `color`
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity)) +
facet_wrap(~color)
# Take the scatter plot of price by carat data (colored by clarity) and add
# _facets_ based on the diamond's `color`
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity)) +
facet_wrap(~cut)
# Take the scatter plot of price by carat data (colored by clarity) and add
# _facets_ based on the diamond's `color`
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity)) +
facet_wrap(~clarity)
# Take the scatter plot of price by carat data (colored by clarity) and add
# _facets_ based on the diamond's `color`
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = color)) +
facet_wrap(~clarity)
# Take the scatter plot of price by carat data (colored by clarity) and add
# _facets_ based on the diamond's `color`
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = color)) +
facet_wrap(~clarity)
