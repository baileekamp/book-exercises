employees <- c("Employee", paste(1:100))
employees <- c(paste("Employee", 1:100))
print (employees)
salaries <- runif(100, min = 40000, max = 50000)
salary_adjustments <- runif(100, min = -5000, max = 10000)
print(salary_adjustments)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
data.frame(employees, salaries, salary_adjustments, stringsAsFactors = FALSE)
employees <- c(paste("Employee", 1:100))
print (employees)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salary <- runif(100, min = 40000, max = 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
salary_adjustments <- runif(100, min = -5000, max = 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salary, salary_adjustments, stringsAsFactors = FALSE)
table_description <- paste("The grade data has", nrow(ta_grades), "rows and", ncol(ta_grades), "cols:", colnames(ta_grades))
ta_grades <- data.frame(tas, math_grades, spanish_grades, stringsAsFactors = FALSE)
table_description <- paste("The grade data has", nrow(ta_grades), "rows and", ncol(ta_grades), "cols:", colnames(ta_grades))
ta_grades <- data.frame(tas, math_grades, spanish_grades, stringsAsFactors = FALSE)
tas <- c("Phuong Vu", "Yunwei Liang", "Yubing Tian", "Gavin Sreesangkom", "Coco Li", "George Zhang", "Saurav Sawansukha", "YuYu Madigan")
math_grades <- rnorm(8, 3.6, 0.4)
spanish_grades <- rnorm(8, 3.8, 0.25)
ta_grades <- data.frame(tas, math_grades, spanish_grades, stringsAsFactors = FALSE)
table_description <- paste("The grade data has", nrow(ta_grades), "rows and", ncol(ta_grades), "cols:", colnames(ta_grades))
print(table_description)
colnames_string <- paste(colnames(ta_grades), collapse = ", ")
print(colnames_string)
table_description <- paste("The grade data has", nrow(ta_grades), "rows and", ncol(ta_grades), "cols:", colnames_string)
table_description <- paste("The grade data has", nrow(ta_grades), "rows and", ncol(ta_grades), "cols:", colnames_string)
print(table_description)
employees <- c(paste("Employee", 1:100))
print (employees)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, min = 40000, max = 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
salary_adjustments <- runif(100, min = -5000, max = 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, salary_adjustments, stringsAsFactors = FALSE)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 <- salaries$salaries_2017 + salaries$salary_adjustments
View(salaries)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$got_raise <- salaries$salary_adjustments > 0
view(salaries)
View(salaries)
# What was the 2018 salary of Employee 57
salaries[salaries$employees == "Employee 57", "salaries_2018")]
salaries[salaries$employees == "Employee 57", "salaries_2018"]
nrows(salaries[salaries$got_raise == TRUE])
nrow(salaries[salaries$got_raise == TRUE])
# How many employees got a raise?
nrow(salaries[salaries$got_raise == TRUE])
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, salary_adjustments, stringsAsFactors = FALSE)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 <- salaries$salaries_2017 + salaries$salary_adjustments
View(salaries)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$got_raise <- salaries$salary_adjustments > 0
View(salaries)
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2018 salary of Employee 57
salaries[salaries$employees == "Employee 57", "salaries_2018"]
# How many employees got a raise?
nrow(salaries[salaries$got_raise == TRUE])
nrow(salaries[salaries$got_raise == TRUE, ])
salaries[salaries$salary_adjustments == max()]
max(salaries$salary_adjustments)
biggest_raise <- max(salaries$salary_adjustments)
salaries[salaries$salary_adjustments == max(salaries$salary_adjustments), "adjustments"]
salaries[ salaries$salary_adjustments == max(salaries$salary_adjustments), "adjustments"]
salaries[salaries$salary_adjustments == max(salaries$salary_adjustments), "adjustments"]
biggest_raise <- max(salaries$salary_adjustments)
salaries[salaries$salary_adjustments == max(salaries$salary_adjustments), "employees"]
salaries[salaries$salary_adjustments == max(salaries$salary_adjustments), "salary_adjustments"]
max(salaries$salary_adjustments)
# What was the "name" of the employee who received the highest raise?
salaries[salaries$salary_adjustments == max(salaries$salary_adjustments), "employees"]
salaries[salaries$salary_adjustments == min(salaries$salary_adjustments), "salary_adjustments"]
salaries[salaries$salary_adjustments == min(salaries$salary_adjustments), "employees"]
mean(salaries$salary_adjustments)
salaries[salaries$salary_adjustments <= 0]
salaries[salaries$salary_adjustments <= 0, "salary_adjustments"]
mean(salaries[salaries$salary_adjustments <= 0, "salary_adjustments"])
data(Titanic)
View(Titanic)
is.data.frame(Titanic)
print(is.data.frame(Titanic))
is.data.frame(Titanic)
mean(salaries[salaries$got_raise == FALSE, "salary_adjustments"])
titanic_df <- as.data.frame(Titanic, stringsAsFactors = FALSE)
print(titanic_df)
salaries_csv <- read.csv("Desktop/book-exercises/chapter-10-exercises/exercise-2", stringsAsFactors = FALSE)
# Write a .csv file of your salary data to your working directory
getwd()
setwd("~/Desktop")
children <- titanic_df[titanic_df$Age[children]]
children <- titanic_df[titanic_df$Age[child]]
children <- titanic_df[titanic_df$Age["child"]]
children <- titanic_df[titanic_df$Age["child"], ]
print(children)
children <- titanic_df[titanic_df$Age["child", ], ]
children <- titanic_df[titanic_df$Age["child", ]]
print(children)
children <- titanic_df[titanic_df$Age["child"], ]
print(children)
children <- titanic_df[titanic_df$Age["child"], "rownames"]
print(children)
children <- titanic_df[titanic_df$Age["child"], ]
print(children)
getwd()
# Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- c(paste("Employee", 1:100))
print (employees)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, min = 40000, max = 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
salary_adjustments <- runif(100, min = -5000, max = 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, salary_adjustments, stringsAsFactors = FALSE)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 <- salaries$salaries_2017 + salaries$salary_adjustments
View(salaries)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$got_raise <- salaries$salary_adjustments > 0
View(salaries)
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2018 salary of Employee 57
salaries[salaries$employees == "Employee 57", "salaries_2018"]
# How many employees got a raise?
nrow(salaries[salaries$got_raise == TRUE, ])
# What was the dollar value of the highest raise?
biggest_raise <- max(salaries$salary_adjustments)
salaries[salaries$salary_adjustments == max(salaries$salary_adjustments), "salary_adjustments"]
max(salaries$salary_adjustments)
# What was the "name" of the employee who received the highest raise?
salaries[salaries$salary_adjustments == max(salaries$salary_adjustments), "employees"]
# What was the largest decrease in salaries between the two years?
salaries[salaries$salary_adjustments == min(salaries$salary_adjustments), "salary_adjustments"]
# What was the name of the employee who recieved largest decrease in salary?
salaries[salaries$salary_adjustments == min(salaries$salary_adjustments), "employees"]
# What was the average salary change?
mean(salaries$salary_adjustments)
# For people who did not get a raise, how much money did they lose on average?
mean(salaries[salaries$got_raise == FALSE, "salary_adjustments"])
## Consider: do the above averages match what you expected them to be based on
## how you generated the salaries?
#Yes. I mean I had no real expectations since the numbers were randomly generated, but I was expecting positive or negative numbers based on what these questions were asking.
# Write a .csv file of your salary data to your working directory
getwd()
salaries_csv <- read.csv("Desktop/book-exercises/chapter-10-exercises/exercise-2", stringsAsFactors = FALSE)
salaries_csv <- read.csv("Desktop/book-exercises/chapter-10-exercises/exercise-2")
salaries_csv <- read.csv(exercise-2, "Desktop/book-exercises/chapter-10-exercises/exercise-2")
salaries_csv <- read.csv(exercise-2, "Desktop/book-exercises/chapter-10-exercises/exercise-2")
salaries_csv <- read.csv(exercise, "Desktop/book-exercises/chapter-10-exercises/exercise-2")
salaries_csv <- read.csv(exercise, "Desktop/book-exercises/chapter-10-exercises/exercise-2.csv")
salaries_csv <- read.csv("Desktop/book-exercises/chapter-10-exercises/exercise-2.csv")
?read.csv
salaries_csv <- read.csv(exercise, "Desktop/book-exercises/chapter-10-exercises/exercise-2.csv")
salaries_csv <- read.csv(exercise, 'Desktop/book-exercises/chapter-10-exercises/exercise-2.csv')
salaries_csv <- read.csv('Desktop/book-exercises/chapter-10-exercises/exercise-2.csv')
('Desktop/book-exercises/chapter-10-exercises/exercise-2')
print(salaries_csv)
View(salaries_csv)
salaries_csv <- read.csv('Desktop/book-exercises/chapter-10-exercises/exercise-2')
salaries_csv <- read.csv("Desktop/book-exercises/chapter-10-exercises/exercise-2")
salaries_csv <- read.csv("Desktop/book-exercises/chapter-10-exercises/exercise-2/exercise")
salaries_csv <- read.csv('Desktop/book-exercises/chapter-10-exercises/exercise-2/exercise')
salaries_csv <- read.csv('exercise')
salaries_csv <- read.csv('/exercise')
getwd()
salaries_csv <- read.csv('~/exercise')
salaries_csv <- read.csv("exercise")
setwd("Desktop/book-exercises/chapter-10-exercises/exercise-2")
salaries_csv <- read.csv("exercise")
salaries_csv <- write.csv("exercise")
read.csv(salaries_csv)
read.csv("salaries_csv")
read.csv("exercise")
salaries_csv <- write.csv("Desktop/book-exercises/chapter-10-exercises/exercise-2")
read.csv("exercise")
read.csv("1")
read.csv(salaries_csv)
read.csv("salaries_csv")
salaries_csv <- write.csv(Salaries, file = 'Desktop/book-exercises/chapter-10-exercises/exercise-2')
salaries_csv <- write.csv(exercise, file = 'Desktop/book-exercises/chapter-10-exercises/exercise-2')
salaries_csv <- write.csv(file = 'Desktop/book-exercises/chapter-10-exercises/exercise-2')
?write.csv
salaries_csv <- write.csv(salaries, file = 'Desktop/book-exercises/chapter-10-exercises/exercise-2')
salaries_csv <- write.csv(exercise, file = 'Desktop/book-exercises/chapter-10-exercises/exercise-2')
salaries_csv <- write.csv(salaries, file = 'Desktop/book-exercises/chapter-10-exercises/exercise-2')
salaries_csv <- write.csv(salaries, file = 'Desktop/book-exercises/chapter-10-exercises/exercise-2')
salaries_csv <- write.csv(salaries, file = "Desktop/book-exercises/chapter-10-exercises/exercise-2")
salaries_csv <- write.csv(salaries, file = Desktop/book-exercises/chapter-10-exercises/exercise-2)
salaries_csv <- write.csv(salaries, file = "Desktop/book-exercises/chapter-10-exercises/exercise-2")
read.csv("salaries_csv")
salaries_csv <- write.csv(salaries, file = "Desktop/book-exercises/chapter-10-exercises/exercise-2/exercise")
salaries_csv <- write.csv(salaries, file = "Desktop/book-exercises/chapter-10-exercises/exercise-2/exercise.csv")
salaries_csv <- write.csv(salaries, file = "Desktop/book-exercises/chapter-10-exercises/exercise-2/exercise.R")
salaries_csv <- write.csv(salaries, file = "Desktop/book-exercises/chapter-10-exercises/exercise-2/exercise.csv")
getwd()
salaries_csv <- write.csv(salaries, file = " " )
salaries_csv <- write.csv(salaries, file = "")
read.csv("salaries_csv")
read.csv(salaries_csv, "")
read.csv(salaries_csv, "Desktop/book-exercises/chapter-10-exercises/exercise-2")
write.csv(salaries, file = "")
read.csv(salaries.csv, "Desktop/book-exercises/chapter-10-exercises/exercise-2")
setwd("C:/Users/baile/Desktop/book-exercises/chapter-10-exercises/exercise-2")
read.csv(salaries.csv, "Desktop/book-exercises/chapter-10-exercises/exercise-2")
getwd()
read.csv(salaries.csv, "")
read.csv(exercise.csv, "")
write.csv(salaries, file = "")
salaries_csv <- write.csv(salaries, file = "")
salaries.csv <- write.csv(salaries, file = "")
salaries <- write.csv(exeercise, file = "")
salaries <- write.csv(exercise, file = "")
salaries <- write.csv(salaries, file = "")
# Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- c(paste("Employee", 1:100))
print (employees)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, min = 40000, max = 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
salary_adjustments <- runif(100, min = -5000, max = 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, salary_adjustments, stringsAsFactors = FALSE)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 <- salaries$salaries_2017 + salaries$salary_adjustments
View(salaries)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$got_raise <- salaries$salary_adjustments > 0
View(salaries)
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2018 salary of Employee 57
salaries[salaries$employees == "Employee 57", "salaries_2018"]
# How many employees got a raise?
nrow(salaries[salaries$got_raise == TRUE, ])
# What was the dollar value of the highest raise?
biggest_raise <- max(salaries$salary_adjustments)
salaries[salaries$salary_adjustments == max(salaries$salary_adjustments), "salary_adjustments"]
max(salaries$salary_adjustments)
# What was the "name" of the employee who received the highest raise?
salaries[salaries$salary_adjustments == max(salaries$salary_adjustments), "employees"]
# What was the largest decrease in salaries between the two years?
salaries[salaries$salary_adjustments == min(salaries$salary_adjustments), "salary_adjustments"]
# What was the name of the employee who recieved largest decrease in salary?
salaries[salaries$salary_adjustments == min(salaries$salary_adjustments), "employees"]
# What was the average salary change?
mean(salaries$salary_adjustments)
# For people who did not get a raise, how much money did they lose on average?
mean(salaries[salaries$got_raise == FALSE, "salary_adjustments"])
## Consider: do the above averages match what you expected them to be based on
## how you generated the salaries?
#Yes. I mean I had no real expectations since the numbers were randomly generated, but I was expecting positive or negative numbers based on what these questions were asking.
# Write a .csv file of your salary data to your working directory
getwd()
salaries <- write.csv(salaries, file = "")
View(salaries)
salaries <- data.frame(employees, salaries_2017, salary_adjustments, stringsAsFactors = FALSE)
View(salaries)
salaries$salaries_2018 <- salaries$salaries_2017 + salaries$salary_adjustments
View(salaries)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$got_raise <- salaries$salary_adjustments > 0
View(salaries)
salaries[salaries$employees == "Employee 57", "salaries_2018"]
# How many employees got a raise?
nrow(salaries[salaries$got_raise == TRUE, ])
biggest_raise <- max(salaries$salary_adjustments)
salaries[salaries$salary_adjustments == max(salaries$salary_adjustments), "salary_adjustments"]
max(salaries$salary_adjustments)
biggest_raise <- max(salaries$salary_adjustments)
salaries[salaries$salary_adjustments == max(salaries$salary_adjustments), "salary_adjustments"]
max(salaries$salary_adjustments)
# What was the "name" of the employee who received the highest raise?
salaries[salaries$salary_adjustments == max(salaries$salary_adjustments), "employees"]
# What was the largest decrease in salaries between the two years?
salaries[salaries$salary_adjustments == min(salaries$salary_adjustments), "salary_adjustments"]
# What was the name of the employee who recieved largest decrease in salary?
salaries[salaries$salary_adjustments == min(salaries$salary_adjustments), "employees"]
# What was the average salary change?
mean(salaries$salary_adjustments)
# For people who did not get a raise, how much money did they lose on average?
mean(salaries[salaries$got_raise == FALSE, "salary_adjustments"])
salaries <- write.csv(salaries, file = "")
# Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- c(paste("Employee", 1:100))
print (employees)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, min = 40000, max = 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
salary_adjustments <- runif(100, min = -5000, max = 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, salary_adjustments, stringsAsFactors = FALSE)
View(salaries)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 <- salaries$salaries_2017 + salaries$salary_adjustments
View(salaries)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$got_raise <- salaries$salary_adjustments > 0
View(salaries)
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2018 salary of Employee 57
salaries[salaries$employees == "Employee 57", "salaries_2018"]
# How many employees got a raise?
nrow(salaries[salaries$got_raise == TRUE, ])
# What was the dollar value of the highest raise?
biggest_raise <- max(salaries$salary_adjustments)
salaries[salaries$salary_adjustments == max(salaries$salary_adjustments), "salary_adjustments"]
max(salaries$salary_adjustments)
# What was the "name" of the employee who received the highest raise?
salaries[salaries$salary_adjustments == max(salaries$salary_adjustments), "employees"]
# What was the largest decrease in salaries between the two years?
salaries[salaries$salary_adjustments == min(salaries$salary_adjustments), "salary_adjustments"]
# What was the name of the employee who recieved largest decrease in salary?
salaries[salaries$salary_adjustments == min(salaries$salary_adjustments), "employees"]
# What was the average salary change?
mean(salaries$salary_adjustments)
# For people who did not get a raise, how much money did they lose on average?
mean(salaries[salaries$got_raise == FALSE, "salary_adjustments"])
## Consider: do the above averages match what you expected them to be based on
## how you generated the salaries?
#Yes. I mean I had no real expectations since the numbers were randomly generated, but I was expecting positive or negative numbers based on what these questions were asking.
# Write a .csv file of your salary data to your working directory
getwd()
salaries_csv <- write.csv(salaries, file = "")
read.csv(salaries_csv, "")
read.csv(file = salaries_csv, "")
read.csv(file = "salaries_csv"")
read.csv(file = "salaries_csv")
read.csv(file = "salaries_csv")
salaries_csv <- write.csv(salaries, file = "salaries_csv")
read.csv(file = "salaries_csv")
read.csv(file = "salaries_csv", stringsAsFactors = FALSE)
