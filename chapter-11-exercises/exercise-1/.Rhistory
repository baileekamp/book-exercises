install.packages("devtools")
devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(fueleconomy)
View(fueleconomy)
library(fueleconomy)
devtools::install_github("hadley/fueleconomy")
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
colnames(vehicles)
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- vehicles$make
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
unique(makes)
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
length(unique(makes))
# Filter the data set for vehicles manufactured in 1997
vehicles[vehicles$year = "1997"]
# Filter the data set for vehicles manufactured in 1997
vehicles[vehicles$year == "1997"]
# Filter the data set for vehicles manufactured in 1997
vehicles[, vehicles$year == "1997"]
# Filter the data set for vehicles manufactured in 1997
vehicles[vehicles$year == "1997", ]
# Filter the data set for vehicles manufactured in 1997
vehicles_1997 <- vehicles[vehicles$year == "1997", ]
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles_1997$average <- (vehicles_1997$highway + vehicles_1997$cty)/2
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles_1997$average <- (vehicles_1997$hwy + vehicles_1997$cty)/2
View(vehicles_1997)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
vehicles[vehicles$drive == "2-Wheel Drive", ]
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
vehicles_2wd <- vehicles[vehicles$drive == "2-Wheel Drive", ]
efficient_2wd <- vehicles_2wd[vehicles_2wd > 20, ]
print(efficient_2wd)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
vehicles_2wd[vehicles_2wd$hwy == min(vehicles_2wd$hwy), ]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
vehicles_2wd[vehicles_2wd$hwy == min(vehicles_2wd$hwy), "id" ]
install.packages(dplyer)
install.packages("dplyer")
# Install and load the "dplyr" library
install.packages("dplyer")
library("dplyer")
# Install and load the "dplyr" library
install.packages("dplyer")
install.packages("Rtools")
# Install and load the "dplyr" library
install.packages("dplyer")
library(fueleconomy)
# Install and load the "dplyr" library
install.packages("dplyer")
library("dplyer")
install.packages("pkgconfig")
library("dplyer")
install.packages("dplyer")
install.packages("dplyer")
install.packages(dplyer)
library("dplyr")
install.packages("pkgconfig")
install.packages("dplyr.teradata")
library("dplyr")
library(fueleconomy)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
select(makes, )
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
select(, makes)
install.packages(dplyer)
install.packages("dplyr")
install.packages("dplyr")
library("dplyr")
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
library(dplyer)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
library("dplyer")
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
library(dplyr)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
library("nycflights13")
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")
library("nycflights13")
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
??flights
View(flights)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
err_delay - dep_delay
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
arr_delay - dep_delay
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
mutate(flights, delayed_in_air = arr_delay - dep_delay)
flights <- mutate(flights, delayed_in_air = arr_delay - dep_delay)
View(flights)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
arrange(flights, delayed_in_air)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
arrange(flights, -delayed_in_air)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, -delayed_in_air)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
summarize(flights, avg = mean(delayed_in_air, na.rm = TRUE))
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
filter(flights, dest == "SEA")
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
to_sea <- filter(flights, dest == "SEA")
View(to_sea)
to_sea <- select(to_sea, origin, dest, delayed_in_air)
View(to_sea)
summarize(flights, avg = mean(delayed_in_air, na.rm = TRUE))
summarize(flights, avg_delayed = mean(delayed_in_air, na.rm = TRUE))
summarize(to_sea, avg_delayed = mean(delayed_in_air, na.rm = TRUE))
flights %>%
filter(dest == "SEA") %>%
#select(origin, dest, delayed_in_air) %>%
summarize(avg_delayed = mean(delayed_in_air, na.rm = TRUE))
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
flights %>%
filter(dest == "SEA") %>%
#select(origin, dest, delayed_in_air) %>%
summarize(avg_delayed = mean(delayed_in_air, na.rm = TRUE)) %>%
pull(avg_delayed)
