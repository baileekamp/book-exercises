# Create a vector `first_ten` that has the values 10 through 20 in it (using
# the : operator)
first_ten <- 10:20
# Create a vector `next_ten` that has the values 21 through 30 in it (using the
# seq() function)
next_ten <- seq(21, 30, 1)
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- c(first_ten, next_ten)
print(all_numbers)
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
nchar(11)
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
nchar(all_numbers, 11)
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_numbers(11)
eleventh <- all_numbers[11]
# Create a vector `some_numbers` that contains the 2nd through the 5th elements
# of `all_numbers`
some_numbers <- all_numbers[2:5]
# Create a vector `even` that holds the even numbers from 1 to 100
even <- even(1:100)
one_hundred <- 1:100
even <- one_hundred[one_hundred/2]
one_hundred <- 1:100
even <- [one_hundred/2]
all(even %% 2)
# Create a vector `even` that holds the even numbers from 1 to 100
even <- seq(1, 100, 2)
print(even)
even <- seq(2, 100, 2)
print(even)
# Create a vector `phone_numbers` that contains the numbers 8, 6, 7, 5, 3, 0, 9
phone_numbers <- function(8, 6, 7, 5, 3, 0, 9)
# Create a vector `phone_numbers` that contains the numbers 8, 6, 7, 5, 3, 0, 9
phone_numbers <- (8, 6, 7, 5, 3, 0, 9)
phone_numbers <- vector(8, 6, 7, 5, 3, 0, 9)
small <- phone_numbers[phone_numbers<=5]
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even%%2)
all(even %% 2)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
?all()
phone_numbers <- c(8, 6, 7, 5, 3, 0, 9)
prefix <- phone_numbers[1:3]
small <- phone_numbers[phone_numbers<=5]
large <- phone_numbers[phone_numbers>5]
gsub(large, 5)
gsub(large, 5, phone_numbers)
gsub("large, "5", phone_numbers)
gsub("large", 5, phone_numbers)
gsub(large, 5, phone_numbers)
gsub("large", 5, phone_numbers)
gsub("large", "5", phone_numbers)
gsub[large, 5, phone_numbers]
gsub(large, 5)
?gsub(large, 5)
gsub([1:4], 5, large)
?all()
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even, even%%2)
all(even, even%%2 = TRUE)
all(even%%2 = TRUE)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even%%2)
all(even > 0)
all(even %% 2)
gsub([1:4], 5, large)
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
gsub(large, 5, phone_numbers)
print(phone_numbers)
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
?gsub(large, 5, phone_numbers)
sub(large, 5, phone_numbers)
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
sub(large, 5)
sub(large, "5")
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
gsub("large", 5)
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
gsub("large", 5, x)
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
gsub("large","5",x)
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
gsub("large","5")
gsub("large","5",x)
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
gsub("large","5")
all(even %% 2==0, TRUE)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even %% 2=0, TRUE)
all(even %% 2==0, TRUE)
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
phone_numbers[phone_numbers >5] <- 5
phone_numbers[phone_numbers >5] <- 5
print(odds)
phone_numbers[phone_numbers odds]  <- 0
phone_numbers[phone_numbers = 1, 3, 5, 7, 9]  <- 0
# Replace every odd-numbered value in `phone_numbers` with the number 0
phone_numbers[phone_numbers = 0, 1, 3, 5, 7, 9]  <- 0
# Replace every odd-numbered value in `phone_numbers` with the number 0
phone_numbers[phone_numbers]  <- 0
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
phone_numbers[phone_numbers > 5] <- 5
# Replace every odd-numbered value in `phone_numbers` with the number 0
phone_numbers[seq(1, 9, 2)]  <- 0
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
phone_numbers[phone_numbers > 5] <- 5
phone_numbers[seq(1, 3, 5)]  <- 0
phone_numbers <- c(8, 6, 7, 5, 3, 0, 9)
prefix <- phone_numbers[1:3]
small <- phone_numbers[phone_numbers<=5]
large <- phone_numbers[phone_numbers>5]
phone_numbers[phone_numbers > 5] <- 5
phone_numbers[seq(1, 3, 5)] <- 0
phone_numbers[phone_numbers > 5] <- 5
phone_numbers <- c(8, 6, 7, 5, 3, 0, 9)
large <- phone_numbers[phone_numbers>5]
phone_numbers[phone_numbers > 5] <- 5
phone_numbers[seq(1, 9, 2)] <- 0
phone_numbers <- c(8, 6, 7, 5, 3, 0, 9)
large <- phone_numbers[phone_numbers>5]
phone_numbers[phone_numbers > 5] <- 5
phone_numbers[c(1,3,5)] <- 0
phone_numbers <- c(8, 6, 7, 5, 3, 0, 9)
phone_numbers[phone_numbers > 5] <- 5
phone_numbers[c(1, 3, 5)] <- 0
phone_numbers <- c(8, 6, 7, 5, 3, 0, 9)
phone_numbers[phone_numbers > 5] <- 5
phone_numbers[phone_numbers %% 2==0, FALSE] <- 0
phone_numbers[all(phone_numbers %% 2==0, FALSE)] <- 0
print(phone_numbers)
i_tried <- "I can't figure this one out for the life of me"
